picotron cartridge // www.picotron.net
version 2

:: main.lua
--[[pod_format="raw",created="2024-12-05 14:51:05",modified="2025-03-03 12:12:01",revision=664]]
include("perlin.lua")

p = userdata("f64", 3, 270*480)

function _init()
	x = 240
	y = 128
	step = 1
	stepAnim = 1
	turn = 0
	chunkSize = 16
	randOff = rnd(309918)
	done = false
	finalPixels = {}
end	

function _update()
	if btn(0) then x -= 1 end
	if btn(1) then x += 1 end
	if btn(2) then y -= 1 end
	if btn(3) then y += 1 end
end

function _draw()
--	cls()
	rectfill(0,0,10,10,0)
	print(stat(7),0,0,7)
	
	if not done then
	chuckPerlinNoise()
--	if time() < 20 then
--		perlinNoiseRand(200)
--	else
--		if not done then
--			denoise(2)
--		end
--		done = true
--	end
	end
end

function chuckPerlinNoise()
	for j=0, chunkSize - 1 do
			for i=0, chunkSize - 1 do
				pset(i+(x),j+(y), perlin:noise((i+(x))/100+randOff, (j+(y))/100+randOff, 0)*10+10)
			end
		end
		
		if turn == 0 then
			x += chunkSize
		elseif turn == 1 then
			y += chunkSize
		elseif turn == 2 then
			x -= chunkSize
		elseif turn == 3 then
			y -= chunkSize
		end
			step -= 1
		if step <= 0 then
			turn = (turn + 1) % 4
			if turn == 0 or turn == 2 then
				stepAnim += 1
			end
				step = stepAnim
			end
			if x < 0 or x > 30 * chunkSize or y < 0 or y > 30 * chunkSize then
				done = true
			end
end

function perlinNoiseRand(itterations)
	for i=0, itterations do
		x = rnd(480)
		y = rnd(270)
		pset(x,y,perlin:noise(x/100+randOff, y/100+randOff, 0)*10+10)
	end
end

function denoise(size)
	for j=0, 270 do
		for i=0, 480 do
			
			local numTable = {}
			for k=-size,size do
				for l=-size,size do
					if not ((k == -size and l == -size) or (k == -size and l == size) or (k == size and l == -size)  or (k == size and l == size)) then
						add(numTable, pget(i+l, j+k))
					end
				end
			end
			add(finalPixels, findMean(numTable))
		end
		add(finalPixels, "\n")
	end
	
	local a,b = 0,0
	for i=1, #finalPixels do
		if finalPixels[i] == "\n" then
			b += 1
			a = 0	
		else
			pset(a,b,finalPixels[i])
			a += 1
		end
	end
end

function findMean(numTable)
    -- Remove zeros from the table
    local nonZeroTable = {}
    for _, value in ipairs(numTable) do
        if value ~= 0 then
            table.insert(nonZeroTable, value)
        end
    end
    
    -- If the table is empty after removing zeros, return 0
    if #nonZeroTable == 0 then
        return 0
    end
    
    -- Calculate sum of all values
    local sum = 0
    for _, value in ipairs(nonZeroTable) do
        sum = sum + value
    end
    
    -- Return average
    return sum / #nonZeroTable
end

function findMode(numTable)
    -- Remove zeros from the table
    local nonZeroTable = {}
    for _, value in ipairs(numTable) do
        if value ~= 0 then
            table.insert(nonZeroTable, value)
        end
    end
    
    -- If the table is empty after removing zeros, return nil
    if #nonZeroTable == 0 then
        return 0
    end
    
    -- Count frequencies of each number
    local frequencyMap = {}
    local maxFrequency = 0
    local mode = nil
    
    for _, value in ipairs(nonZeroTable) do
        -- Increment frequency, defaulting to 1 if not yet counted
        frequencyMap[value] = (frequencyMap[value] or 0) + 1
        
        -- Update mode if this value has a higher frequency
        if frequencyMap[value] > maxFrequency then
            maxFrequency = frequencyMap[value]
            mode = value
        end
    end
    
    return mode
end

-- Example usage:
local numbers = {1, 2, 0, 3, 2, 0, 2, 4, 2, 0}
local result = findMode(numbers)
print(result)  -- Should print 2
:: perlin.lua
--[[pod_format="raw",created="2024-12-05 14:53:09",modified="2025-03-03 12:12:01",revision=393]]
--[[
    Implemented as described here:
    http://flafla2.github.io/2014/08/09/perlinnoise.html
]]--

perlin = {}
perlin.p = {}

-- Hash lookup table as defined by Ken Perlin
-- This is a randomly arranged array of all numbers from 0-255 inclusive
local permutation = {151,160,137,91,90,15,
  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
}

-- p is used to hash unit cube coordinates to [0, 255]
for i=0,255 do
    -- Convert to 0 based index table
    perlin.p[i] = permutation[i+1]
    -- Repeat the array to avoid buffer overflow in hash function
    perlin.p[i+256] = permutation[i+1]
end

-- Return range: [-1, 1]
function perlin:noise(x, y, z)
    y = y or 0
    z = z or 0

    -- Calculate the "unit cube" that the point asked will be located in    
	local xi = band(flr(x), 255)
	local yi = band(flr(y), 255)
	local zi = band(flr(z), 255)

    -- Next we calculate the location (from 0 to 1) in that cube
    x = x - flr(x)
    y = y - flr(y)
    z = z - flr(z)

    -- We also fade the location to smooth the result
    local u = self.fade(x)
    local v = self.fade(y)
    local w = self.fade(z)

    -- Hash all 8 unit cube coordinates surrounding input coordinate
    local p = self.p
    local A, AA, AB, AAA, ABA, AAB, ABB, B, BA, BB, BAA, BBA, BAB, BBB
    A   = p[xi  ] + yi
    AA  = p[A   ] + zi
    AB  = p[A+1 ] + zi
    AAA = p[ AA ]
    ABA = p[ AB ]
    AAB = p[ AA+1 ]
    ABB = p[ AB+1 ]

    B   = p[xi+1] + yi
    BA  = p[B   ] + zi
    BB  = p[B+1 ] + zi
    BAA = p[ BA ]
    BBA = p[ BB ]
    BAB = p[ BA+1 ]
    BBB = p[ BB+1 ]

    -- Take the weighted average between all 8 unit cube coordinates
    return self.lerp(w,
        self.lerp(v,
            self.lerp(u,
                self:grad(AAA,x,y,z),
                self:grad(BAA,x-1,y,z)
            ),
            self.lerp(u,
                self:grad(ABA,x,y-1,z),
                self:grad(BBA,x-1,y-1,z)
            )
        ),
        self.lerp(v,
            self.lerp(u,
                self:grad(AAB,x,y,z-1), self:grad(BAB,x-1,y,z-1)
            ),
            self.lerp(u,
                self:grad(ABB,x,y-1,z-1), self:grad(BBB,x-1,y-1,z-1)
            )
        )
    )
end

-- Gradient function finds dot product between pseudorandom gradient vector
-- and the vector from input coordinate to a unit cube vertex
perlin.dot_product = {
    [0x0]=function(x,y,z) return  x + y end,
    [0x1]=function(x,y,z) return -x + y end,
    [0x2]=function(x,y,z) return  x - y end,
    [0x3]=function(x,y,z) return -x - y end,
    [0x4]=function(x,y,z) return  x + z end,
    [0x5]=function(x,y,z) return -x + z end,
    [0x6]=function(x,y,z) return  x - z end,
    [0x7]=function(x,y,z) return -x - z end,
    [0x8]=function(x,y,z) return  y + z end,
    [0x9]=function(x,y,z) return -y + z end,
    [0xA]=function(x,y,z) return  y - z end,
    [0xB]=function(x,y,z) return -y - z end,
    [0xC]=function(x,y,z) return  y + x end,
    [0xD]=function(x,y,z) return -y + z end,
    [0xE]=function(x,y,z) return  y - x end,
    [0xF]=function(x,y,z) return -y - z end
}
function perlin:grad(hash, x, y, z)
    return self.dot_product[band(hash,0xF)](x,y,z)
end

-- Fade function is used to smooth final output
function perlin.fade(t)
    return t * t * t * (t * (t * 6 - 15) + 10)
end

function perlin.lerp(t, a, b)
    return a + t * (b - a)
end

function band(a, b)
    local result = 0
    for i = 0, 31 do
        local bit = 2^i
        if (a & bit > 0) and (b & bit > 0) then
            result = result + bit
        end
    end
    return result
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTA1IDE0OjUwOjUwIixtb2RpZmllZD0iMjAyNS0w
My0wMyAxMjoxMjowMiIscnVudGltZT0xMix3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzI2Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwZXJsaW4ubHVhIzc3Iix3b3Jrc3Bh
Y2VfaW5kZXg9MX19XV0=
:: [eoc]
